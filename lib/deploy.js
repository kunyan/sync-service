const fsp = require("fs").promises;
const path = require("path");
const decompress = require("decompress");
const config = require("../config");
const mvdir = require("mvdir");
const tmp = require("tmp-promise");
const common = require("@spaship/common");
const { write: writeMetadata } = require("./metadata");

async function deploy({ name, spaArchive, appPath, ref } = {}) {
  console.log(
    `[deploy] deploying "${name}", bundle saved to ${spaArchive}, extracting...`
  );

  // create a dir in the tmp_dir location, but keep the random archive name
  let tmpDir = `${spaArchive}-extracted`;
  try {
    await fsp.mkdir(config.get("tmp_dir"));
  } catch (e) {
    if (e.code !== "EEXIST") {
      throw e;
    }
  }
  await fsp.mkdir(tmpDir);
  // const tmpDir = await fsp.m({ template: path.join(config.get("tmp_dir"), " });

  console.log(`created tmp dir ${tmpDir}`);

  // extract the archive
  try {
    await decompress(spaArchive, tmpDir);

    // detect if the archive was created with `npm pack`.  npm pack creates a
    // tarball with a "package" dir.  we want what's in the package dir but not
    // the dir itself.
    let isNpmPack;
    try {
      const packageStat = await fsp.lstat(path.join(tmpDir, "package"));
      isNpmPack = packageStat.isDirectory();
    } catch (e) {
      isNpmPack = false;
    }

    // if the archive was generated by `npm pack`, move into the "package"
    // directory where all the goodies are.
    if (isNpmPack) {
      console.log(`detected npm pack archive, moving into package/`);
      tmpDir = path.join(tmpDir, "package");
    }

    let yaml;
    const yamlFilePath = path.join(tmpDir, "spaship.yaml");
    try {
      yaml = await common.config.read(yamlFilePath);
      console.log(`yaml extracted:`, yaml);
      name = yaml.name;
      appPath = yaml.path;
    } catch (e) {
      console.log(`no spaship.yaml found`);
    }
    // console.log(yaml.toString());

    // remove starting slashes in paths
    const flatPath = common.flatpath.toDir(appPath);
    const destDir = path.resolve(config.get("webroot"), flatPath);

    // move the goodies dir to the final destination in the webroot
    console.log(`moving from ${tmpDir} to ${destDir}`);
    await mvdir(tmpDir, destDir);

    // // write spa metadata to filesystem
    if (ref) {
      writeMetadata(path.join(destDir, "spaship.yaml"), { ref });
    }
    // writeMetadata({
    //   appName: name,
    //   appPath: destDir,
    //   type: "name",
    //   value: name
    // });

    console.log(`[deploy] extracted "${name}" to ${destDir}, deploy complete.`);
  } catch (err) {
    console.error(err);
  }
}

module.exports = deploy;
